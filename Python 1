{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2565e4ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# To pull real time crypto data from https://coinmarketcap.com/ using API\n",
    "\n",
    "from requests import Request, Session\n",
    "from requests.exceptions import ConnectionError, Timeout, TooManyRedirects\n",
    "import json\n",
    "\n",
    "url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'\n",
    "parameters = {\n",
    "  'start':'1',\n",
    "  'limit':'15',\n",
    "  'convert':'USD'\n",
    "}\n",
    "headers = {\n",
    "  'Accepts': 'application/json',\n",
    "  'X-CMC_PRO_API_KEY': '0ad53085-1cb2-4eb8-ad9e-3ffbd7e56509',\n",
    "}\n",
    "\n",
    "session = Session()\n",
    "session.headers.update(headers)\n",
    "\n",
    "try:\n",
    "  response = session.get(url, params=parameters)\n",
    "  data = json.loads(response.text)\n",
    "  print(data)\n",
    "except (ConnectionError, Timeout, TooManyRedirects) as e:\n",
    "  print(e)\n",
    "\n",
    "# Note:\n",
    "# In case of reaching output limit, type: \"jupyter notebook --NotebookApp.iopub_data_rate_limit=1e10\"\n",
    "# Into the Anaconda Prompt to change this to allow to pull data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d9b2a1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import os\n",
    "from time import time\n",
    "from time import sleep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36c26d30",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display all columns and rows\n",
    "pd.set_option('display.max_columns',None)\n",
    "pd.set_option('display.max_rows',15)\n",
    "\n",
    "# Format numeric value to 5 decimals\n",
    "pd.set_option('display.float_format', lambda x : '%.5f' % x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12cc75a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "type(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f9accc8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Normalizes data to dataframe\n",
    "df = pd.json_normalize(data['data'])\n",
    "\n",
    "# Input last_updated time\n",
    "df['timestamp'] = pd.to_datetime('now').round('1min')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f0d19fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a function that pull real time crypto data and store into CSV file every minute\n",
    "\n",
    "def api_run():\n",
    "    \n",
    "    url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'\n",
    "    parameters = {\n",
    "      'start':'1',\n",
    "      'limit':'15',\n",
    "      'convert':'USD'\n",
    "    }\n",
    "    headers = {\n",
    "      'Accepts': 'application/json',\n",
    "      'X-CMC_PRO_API_KEY': '6320bbe5-738e-433b-837b-5f47eec903b1',\n",
    "    }\n",
    "\n",
    "    session = Session()\n",
    "    session.headers.update(headers)\n",
    "\n",
    "    try:\n",
    "      response = session.get(url, params=parameters)\n",
    "      data = json.loads(response.text)\n",
    "      #print(data)\n",
    "    except (ConnectionError, Timeout, TooManyRedirects) as e:\n",
    "      print(e)\n",
    "    \n",
    "    df = pd.json_normalize(data['data'])\n",
    "    df['timestamp'] = pd.to_datetime('now').round('1min')\n",
    "    \n",
    "    if not os.path.isfile(r'D:\\Data Analyst\\Crytomarket.csv'):\n",
    "        df.to_csv(r'D:\\Data Analyst\\Crytomarket.csv', header = 'column_name', index = False)\n",
    "    else:\n",
    "        df.to_csv(r'D:\\Data Analyst\\Crytomarket.csv', mode = 'a', header = False, index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d63d383",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Automate data pulling every 1 minute\n",
    "count = 1\n",
    "while True:\n",
    "    api_run()\n",
    "    print(f\"API run completed ({count})\")\n",
    "    count += 1\n",
    "    sleep(60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7302f8d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(r'D:\\Data Analyst\\Crytomarket.csv')\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4890cc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group by 'name' and calculate the percent change for each time frame\n",
    "df2 = df1.groupby('name',sort=False)[['quote.USD.percent_change_1h', 'quote.USD.percent_change_24h', 'quote.USD.percent_change_7d', 'quote.USD.percent_change_30d', 'quote.USD.percent_change_60d', 'quote.USD.percent_change_90d']].mean()\n",
    "df2 = df2.reset_index()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bee59e31",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Melt the DataFrame to transform it into long format\n",
    "df3 = df2.melt(id_vars = 'name', var_name = 'time_frame', value_name = 'percent_change')\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "573f3392",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Rename the time_frame values\n",
    "df3['time_frame'] = df3['time_frame'].replace({\n",
    "    'quote.USD.percent_change_1h': '1h',\n",
    "    'quote.USD.percent_change_24h': '24h',\n",
    "    'quote.USD.percent_change_7d': '7d',\n",
    "    'quote.USD.percent_change_30d': '30d',\n",
    "    'quote.USD.percent_change_60d': '60d',\n",
    "    'quote.USD.percent_change_90d': '90d'\n",
    "})\n",
    "\n",
    "# Create a point plot using Seaborn\n",
    "sns.catplot(x = 'time_frame', y = 'percent_change', hue = 'name', data = df3, kind = 'point', aspect = 1.6)\n",
    "plt.title('Cryptocurrency Price Changes Over Time')\n",
    "plt.xlabel('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "447c637b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select real time Bitcoin data and format it\n",
    "df1 = pd.read_csv(r'D:\\Data Analyst\\Crytomarket.csv')\n",
    "df_b = df1[['name', 'quote.USD.price', 'timestamp']]\n",
    "df_b = df_b.query(\"name in ['Bitcoin']\")\n",
    "df_b = df_b.rename(columns = {'quote.USD.price':'USD'})\n",
    "df_b['timestamp'] = pd.to_datetime(df_b['timestamp'])\n",
    "df_b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1442e5e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Bitcoin price chart\n",
    "fig = px.line (df_b, x = 'timestamp', y = 'USD', title = 'Bitcoin Prices', template = 'plotly_dark', color_discrete_sequence = ['orange'], width = 900)\n",
    "fig.update_xaxes(title_text = '')\n",
    "fig.update_layout(title_x = 0.5)\n",
    "fig.update_layout\n",
    "fig.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
